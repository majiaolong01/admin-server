<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	 http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	 http://www.springframework.org/schema/context
	 http://www.springframework.org/schema/context/spring-context-3.0.xsd
	 http://www.springframework.org/schema/tx
	 http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	 http://www.springframework.org/schema/aop
     http://www.springframework.org/schema/aop/spring-aop.xsd
     http://www.springframework.org/schema/websocket
            http://www.springframework.org/schema/websocket/spring-websocket-4.0.xsd"
     >
	 <!-- 引入配置文件 -->
   
    <bean id="propertyConfigurer"  
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
       <!--  <property name="location" value="classpath:jdbc.properties" />   -->
        <property name="ignoreUnresolvablePlaceholders" value="true" />  
        <property name="locations">
	        <list>
	        	<value>classpath:jdbc.properties</value>
	        	<value>classpath:redis.properties</value>
	        </list>
        </property>  
    </bean>  
	<bean id="dataSource"
		  class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName"
				  value="${driver}">
		</property>
		<property name="url"
				  value="${url}">
		</property>
		<property name="username" value="${username}"></property>
		<property name="password" value="${password}"></property>
	</bean>
	<bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatisconfig.xml"></property>
		<property name="dataSource" ref="dataSource"></property>
		<!--起别名，使用这个配置emp在任何地方就可以代替com.lanxin.bean.Emp-->
		<property name="typeAliasesPackage" value="com.lanxin.bean"></property>
		<!--自动扫描所有mapping.xml文件-->
		<property name="mapperLocations" value="classpath:mappers/*.xml"></property>
	</bean>

	<!--dao接口所在包，spring会自动扫描其下类-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sessionFactory"></property>
		<property name="basePackage" value="com.lanxin.dao"></property>
	</bean>
	<!--文件上传和下载包  -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">    
     <property name="defaultEncoding" value="utf-8"></property>    
     <property name="maxUploadSize" value="5242440"></property>    
    </bean>

	<!--开启注解扫描-->
	<context:annotation-config></context:annotation-config>
	<context:component-scan base-package="com.lanxin"></context:component-scan>
	<!--事物管理器-->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!--开启注解驱动-->
	<tx:annotation-driven transaction-manager="transactionManager"></tx:annotation-driven>

    <aop:aspectj-autoproxy proxy-target-class="true" />
     <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.maxIdle}"/>
        <property name="maxWaitMillis" value="${redis.maxWait}"/>
        <property name="testOnBorrow" value="${redis.testOnBorrow}"/>
    </bean>
    <!-- redis连接工厂 -->
    <bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="poolConfig" ref="poolConfig"/>
        <property name="port" value="${redis.port}"/>
        <property name="hostName" value="${redis.host}"/>
        <property name="password" value="${redis.password}"/>
        <property name="timeout" value="${redis.timeout}"></property>
    </bean>
     <!-- Jedis模板配置  -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="connectionFactory"/>
         <!--     如果不配置Serializer，那么存储的时候只能使用String，如果用对象类型存储，那么会提示错误 can't cast to String！！！-->
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
          <!-- 采用json序列化 -->  
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
        </property>
     <!-- 开启REIDS事务支持 -->
        <property name="enableTransactionSupport" value="true"/> 
    </bean>
    <bean id="redisUtil" class="com.lanxin.util.RedisUtil">
        <property name="redisTemplate" ref="redisTemplate"/>
    </bean> 
  
</beans>